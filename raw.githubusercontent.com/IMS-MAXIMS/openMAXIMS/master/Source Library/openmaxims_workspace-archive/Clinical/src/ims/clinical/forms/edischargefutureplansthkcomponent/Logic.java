//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3931.23803)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinical.forms.edischargefutureplansthkcomponent;


import ims.clinical.forms.edischargefutureplansthkcomponent.GenForm.GroupFitToReturnToWorkEnumeration;
import ims.clinical.forms.edischargefutureplansthkcomponent.GenForm.GroupFollowUpAppRequiredEnumeration;
import ims.clinical.forms.edischargefutureplansthkcomponent.GenForm.GroupFollowUpEnumeration;
import ims.clinical.forms.edischargefutureplansthkcomponent.GenForm.GroupLivesAloneEnumeration;
import ims.clinical.forms.edischargefutureplansthkcomponent.GenForm.GroupStatementOfFitnessEnumeration;
import ims.clinical.forms.edischargefutureplansthkcomponent.GenForm.grdFuturePlanRow;
import ims.clinical.vo.DischargeFuturePlanFollowUpVo;
import ims.clinical.vo.DischargeFuturePlanFollowUpVoCollection;
import ims.clinical.vo.DischargeFuturePlanSthkVo;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.NurseEnabledInstructionsVo;
import ims.clinical.vo.enums.EDischargeLastEvent;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int COL_HOSPITAL_FOLLOW_UP = 0;
	private static final int COL_HCP = 2;				//wdev-11818
	private static final int COL_LOCATION = 4;			//wdev-11818
	
	private static final int MIN_NUMBER_OF_CHARS_FOR_HCP = 3;	//WDEV-12488
	private static final int MIN_NUMBER_OF_CHARS_FOR_LOCATION = 3;	//WDEV-12488

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Component interface functions
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	public void initialise()
	{
		initialize();
		
		open();
	}

	public void initialise(EDischargeSTHKSummaryVo dischargeSummary)
	{
		// Set DischargeSummary in the local context
		form.getLocalContext().setDischargeSummary(dischargeSummary);

		initialise();
	}

	public void refresh()
	{
		open();
	}

	/**
	 * Component interface function used to set the CareContext
	 */
	public void setCareContext(CareContextRefVo careContext)
	{
		form.getLocalContext().setCareContext(careContext);
		form.setMode(FormMode.VIEW);
	}

	/**
	 * 	Component interface function used to set the component to read-only mode
	 */
	public void setReadOnly()
	{
		form.getLocalContext().setReadOnlyMode(Boolean.TRUE);
		form.setMode(FormMode.VIEW);
	}

	/**
	 *	Component interface function used to set the component to read-only or read-write mode
	 */
	public void setReadOnly(Boolean value)
	{
		form.getLocalContext().setReadOnlyMode(Boolean.TRUE.equals(value));
	}

	public EDischargeLastEvent getLastEvent()
	{
		return form.getLocalContext().getLastEvent();
	}

	public void clearLastEvent()
	{
		form.getLocalContext().setLastEvent(null);
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Event handlers
	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
//		initialize();
//
//		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private int calculateAgeAtCareContextDate(PartialDate dob, Date dateCareContext) 
	{
		int age = 0;
		if(dateCareContext!=null && dob!=null){
			
			Date dateOfbirth = null; 
			dateOfbirth = dob.toDate();
			//WDEV-11421 complete partial date
			if(dateOfbirth==null)
				dateOfbirth = new Date(dob.getYear(),01,01);
			
			age = dateCareContext.yearDiff(dateOfbirth);
		}
		
		return age;
	}

	private boolean ageLessThanOrEqualToConfig(int configAge) 
	{
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		PatientShort voPatientShort = form.getGlobalContext().Core.getPatientShort();
		DateTime careContextDateTime = voCareContext.getStartDateTime();
		
		if(careContextDateTime!=null)
			if(calculateAgeAtCareContextDate(voPatientShort.getDob(), careContextDateTime.getDate()) <= configAge)
				return true;
		
		return false;
	}
	
	private void setSchoolControls() 
	{
		if(ageLessThanOrEqualToConfig(ConfigFlag.UI.SCHOOL_NURSERY_ON_CLINICAL_INFORMATION_IS_VISIBLE_FOR_PATIENTS_TO_AGE.getValue()))
		{
			//WDEV-11817 form.GroupLivesAlone().setValue(GroupLivesAloneEnumeration.rdoLivesAloneNo);
			//form.GroupCertificateOfSickness().setValue(GroupCertificateOfSicknessEnumeration.rdoCertificateNo);
			form.GroupStatementOfFitness().setValue(GroupStatementOfFitnessEnumeration.rdoStatFitnessNo);
			form.GroupFitToReturnToWork().setValue(GroupFitToReturnToWorkEnumeration.rdoFitToReturnWorkNo);
		}
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		setSchoolControls(); 
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
			open();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	@Override
	protected void onGrdFuturePlanSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onGrdFuturePlanGridComboBoxSelectionChanged(int column, grdFuturePlanRow row, Object value) throws PresentationLogicException
	{
		switch (column)
		{
			//case COL_HOSPITAL_FOLLOW_UP:
			//	updateRowColumnsState(row, !YesNo.YES.equals(value));
		}
	}

	@Override
	protected void onGrdFuturePlanGridQueryComboBoxTextSubmited(int column, grdFuturePlanRow row, String text) throws PresentationLogicException
	{
		try
		{
			switch (column)
			{
				case COL_HCP:
					populateHcpQueryComboBox(row, domain.listHCP(text));
					break;

				case COL_LOCATION:
					populateLocationQueryComboBox(row, domain.listLocations(text));
					break;
			}
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
		}
	}

	
	
	@Override
	protected void onRadioButtonGroupStatementOfFitnessValueChanged() throws PresentationLogicException
	{
		clearStatementOfFitnessRelated();//WDEV-12036
		updateControlsState();
	}

	private void clearStatementOfFitnessRelated()//WDEV-12036
	{
		if (GroupStatementOfFitnessEnumeration.rdoStatFitnessNo.equals(form.GroupStatementOfFitness().getValue()))
		{
			form.dteFrom().setValue(null);
			form.dteTo().setValue(null);
		}
		
	}

	@Override
	protected void onRadioButtonGroupFitToReturnToWorkValueChanged() throws PresentationLogicException
	{
		clearFitToReturnToWorkRelated();//WDEV-12036
		updateControlsState();
	}

	private void clearFitToReturnToWorkRelated()//WDEV-12036
	{
		form.cmbReturnToWorkAdvice().setValue(null);
		form.intAdviceApplicable().setValue(null);
		form.cmbAdviceapplicable().setValue(null);
		
	}

	@Override
	protected void onRadioButtonGroupFollowUpValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onChkCompleteValueChanged() throws PresentationLogicException
	{
		// Validate the form for mandatory text entered
		if (Boolean.TRUE.equals(form.chkComplete().getValue()))
		{
			String[] errors = validateUIRules();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
			}
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				addNewFollowUpDetail();
				break;

			default:
				removeFollowUpDetail();
				break;
		}

		updateContextMenusState();
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation functions
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	public void initialize()
	{
		form.getLocalContext().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
	}

	public void open()
	{
		// Get the future plan from data base into local context
		form.getLocalContext().setFuturePlan(domain.getFuturePlan(form.getLocalContext().getCareContext()));

		// Display future plan on form
		populateScreenFromData(form.getLocalContext().getFuturePlan());

		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
	}

	private boolean save() throws PresentationLogicException
	{
		// Get data from screen
		form.getLocalContext().setFuturePlan(populateDataFromScreen(form.getLocalContext().getFuturePlan()));

		// Custom validate & validate the VO
		String[] errors = validateUIRules();
		errors = form.getLocalContext().getFuturePlan().validate(errors);

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Try to save
		try
		{
			form.getLocalContext().setFuturePlan(domain.saveFuturePlan(form.getLocalContext().getFuturePlan(), form.getLocalContext().getDischargeSummary()));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		form.getLocalContext().setLastEvent(EDischargeLastEvent.EDISCHARGE_SAVE);
		form.fireCustomControlValueChanged();

		return true;
	}

	private void updateControlsState()
	{
		// We need to separate conditions by mode

		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(!form.getLocalContext().getFuturePlanIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getReadOnlyMode()));
			form.btnEdit().setVisible(form.getLocalContext().getFuturePlanIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getReadOnlyMode()));
		}
		else if (FormMode.EDIT.equals(form.getMode()))
		{
			form.btnSave().setVisible(true);
			form.btnSave().setEnabled(!Boolean.TRUE.equals(form.getLocalContext().getReadOnlyMode()));
			
			boolean enableDateControls = GroupStatementOfFitnessEnumeration.rdoStatFitnessYes.equals(form.GroupStatementOfFitness().getValue()); //wdev-11818
			
			form.dteFrom().setEnabled(enableDateControls);
			form.dteTo().setEnabled(enableDateControls);

			form.txtNurseEnabled().setEnabled(GroupFollowUpEnumeration.rdoNurseYes.equals(form.GroupFollowUp().getValue()));

			form.cmbReturnToWorkAdvice().setEnabled(GroupFitToReturnToWorkEnumeration.rdoFitToReturnWorkYes.equals(form.GroupFitToReturnToWork().getValue()));
			form.intAdviceApplicable().setEnabled(GroupFitToReturnToWorkEnumeration.rdoFitToReturnWorkYes.equals(form.GroupFitToReturnToWork().getValue()) && form.cmbReturnToWorkAdvice().getValue()!=null);//WDEV-12036
			form.cmbAdviceapplicable().setEnabled(GroupFitToReturnToWorkEnumeration.rdoFitToReturnWorkYes.equals(form.GroupFitToReturnToWork().getValue()) && form.cmbReturnToWorkAdvice().getValue()!=null);//WDEV-12036
			
			form.grdFuturePlan().setReadOnly(!GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqYes.equals(form.GroupFollowUpAppRequired().getValue()));//WDEV-12036
			updateGridFollowUpRowsColumnsState();
		}

		// Update context menu options
		updateContextMenusState();
	}

	private void updateGridFollowUpRowsColumnsState()
	{
		for (int i = 0; i < form.grdFuturePlan().getRows().size(); i++)
		{
			grdFuturePlanRow row = form.grdFuturePlan().getRows().get(i);
			
			updateRowColumnsState(row, !GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqYes.equals(form.GroupFollowUpAppRequired().getValue())/*!YesNo.YES.equals(row.getColHospFollowUp())*/);	//wdev-11818
		}
	}

	private void updateRowColumnsState(grdFuturePlanRow row, boolean disable)
	{
		row.setColINReadOnly(disable);
		row.setColPeriodReadOnly(disable);
		
		row.setColHCPReadOnly(disable);
		row.getColHCP().setMinNumberOfChars(MIN_NUMBER_OF_CHARS_FOR_HCP);	//WDEV-12488
		
		row.setColSpecReadOnly(disable);
		
		row.setColLocReadOnly(disable);
		row.getColLoc().setMinNumberOfChars(MIN_NUMBER_OF_CHARS_FOR_LOCATION);	//WDEV-12488
	}

	private void updateContextMenusState()
	{
		// Hide all context menu options
		form.getContextMenus().hideAllGenericGridMenuItems();

		form.getContextMenus().getGenericGridAddItem().setVisible(FormMode.EDIT.equals(form.getMode()) && GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqYes.equals(form.GroupFollowUpAppRequired().getValue()));
		form.getContextMenus().getGenericGridRemoveItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.grdFuturePlan().getSelectedRow() != null && GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqYes.equals(form.GroupFollowUpAppRequired().getValue()));
	}

	private void clearInstanceControls()
	{
		// Clear follow up details grid
		form.grdFuturePlan().getRows().clear();

		form.txtHospitalPlan().setValue(null);
		form.txtActions().setValue(null);

		form.GroupLivesAlone().setValue(null);
		//form.GroupCertificateOfSickness().setValue(null);
		form.GroupFollowUpAppRequired().setValue(null);  //wdev-11818
		form.GroupFollowUpAppRequired().setValue(null);
		form.GroupStatementOfFitness().setValue(null);

		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);

		form.GroupFitToReturnToWork().setValue(null);
		form.cmbReturnToWorkAdvice().setValue(null);
		form.intAdviceApplicable().setValue(null);
		form.cmbAdviceapplicable().setValue(null);

		form.txtComments().setValue(null);

		form.GroupFollowUp().setValue(null);
		form.txtNurseEnabled().setValue(null);
		
		form.chkComplete().setValue(null);
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	private void populateScreenFromData(DischargeFuturePlanSthkVo futurePlan)
	{
		// Clear the instance controls
		clearInstanceControls();

		// Terminate if the parameter is null
		if (futurePlan == null)
			return;

		// Set follow up details to grid
		populateFollowUpGridFromData(futurePlan.getFollowUpDetails());

		// Set Hospital Plan text
		form.txtHospitalPlan().setValue(futurePlan.getHospitalPlan());
		// Set action for GP Community and Special Services text
		form.txtActions().setValue(futurePlan.getActionsforGPandCommunity());

		// Set Lives Alone radio buttons
		if (YesNo.YES.equals(futurePlan.getLivesAlone()))
			form.GroupLivesAlone().setValue(GroupLivesAloneEnumeration.rdoLivesAloneYes);
		else if (YesNo.NO.equals(futurePlan.getLivesAlone()))
			form.GroupLivesAlone().setValue(GroupLivesAloneEnumeration.rdoLivesAloneNo);

		//wdev-11818
		//Set Follow-Up Appointment Required  radio buttons
		if (YesNo.YES.equals(futurePlan.getHospitalFollowUp()))
			form.GroupFollowUpAppRequired().setValue(GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqYes);
		else if (YesNo.NO.equals(futurePlan.getHospitalFollowUp()))
			form.GroupFollowUpAppRequired().setValue(GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqNo);
		//-----
		

		// Set Statement of Fitness to Work radio buttons
		if (YesNo.YES.equals(futurePlan.getStatementOfFitnessToWorkIssue()))
			form.GroupStatementOfFitness().setValue(GroupStatementOfFitnessEnumeration.rdoStatFitnessYes);
		else if (YesNo.NO.equals(futurePlan.getStatementOfFitnessToWorkIssue()))
			form.GroupStatementOfFitness().setValue(GroupStatementOfFitnessEnumeration.rdoStatFitnessNo);

		// Set From and To dates
		form.dteFrom().setValue(futurePlan.getCertificateStartsDate());
		form.dteTo().setValue(futurePlan.getCertificateExpiresDate());

		// Set Fit to return to work radio buttons
		if (YesNo.YES.equals(futurePlan.getFitToReturnToWork()))
			form.GroupFitToReturnToWork().setValue(GroupFitToReturnToWorkEnumeration.rdoFitToReturnWorkYes);
		else if (YesNo.NO.equals(futurePlan.getFitToReturnToWork()))
			form.GroupFitToReturnToWork().setValue(GroupFitToReturnToWorkEnumeration.rdoFitToReturnWorkNo);

		// Set Return to work advice combo-box
		form.cmbReturnToWorkAdvice().setValue(futurePlan.getReturnToWorkAdvice());

		// Set Advice applicable for int box and combo box
		form.intAdviceApplicable().setValue(futurePlan.getAdviceApplicatiableFor());
		form.cmbAdviceapplicable().setValue(futurePlan.getAdviceApplicatiableForUnit());

		// Set Comments text box
		form.txtComments().setValue(futurePlan.getComments());

		// Set Instruction for discharging nurse
		if (Boolean.TRUE.equals(futurePlan.getWasNurseEnabledDischarge()))
			form.GroupFollowUp().setValue(GroupFollowUpEnumeration.rdoNurseYes);
		else if (Boolean.FALSE.equals(futurePlan.getWasNurseEnabledDischarge()))
			form.GroupFollowUp().setValue(GroupFollowUpEnumeration.rdoNurseNo);

		form.txtNurseEnabled().setValue(futurePlan.getNurseEnabledInstructionsIsNotNull() ? futurePlan.getNurseEnabledInstructions().getNurseEnabledInstructions() : null);

		// Set isComlete check-box
		form.chkComplete().setValue(Boolean.TRUE.equals(futurePlan.getIsComplete()));
	}

	private DischargeFuturePlanSthkVo populateDataFromScreen(DischargeFuturePlanSthkVo futurePlan)
	{
		// If the VO passed create one
		if (futurePlan == null)
		{
			futurePlan = new DischargeFuturePlanSthkVo();
		}

		// Set the CareContext
		futurePlan.setCareContext(form.getLocalContext().getCareContext());

		// Get follow up details from grid
		futurePlan.setFollowUpDetails(populateDataFromFollowUpGrid());

		// Get Hospital Plan value
		futurePlan.setHospitalPlan(form.txtHospitalPlan().getValue());
		// Get Actions for GP Community and Special Services value
		futurePlan.setActionsforGPandCommunity(form.txtActions().getValue());

		// Get Lives Alone value
		if (GroupLivesAloneEnumeration.rdoLivesAloneYes.equals(form.GroupLivesAlone().getValue()))
			futurePlan.setLivesAlone(YesNo.YES);
		else if (GroupLivesAloneEnumeration.rdoLivesAloneNo.equals(form.GroupLivesAlone().getValue()))
			futurePlan.setLivesAlone(YesNo.NO);
		else
			futurePlan.setLivesAlone(null);

		//wdev-11818
		//Get Follow-Up Appointment Required
		if (GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqYes.equals(form.GroupFollowUpAppRequired().getValue()))
			futurePlan.setHospitalFollowUp(YesNo.YES);
		else if (GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqNo.equals(form.GroupFollowUpAppRequired().getValue()))
			futurePlan.setHospitalFollowUp(YesNo.NO);
		else
			futurePlan.setHospitalFollowUp(null);
		//------------
		

		// Get Statement of Fitness value
		if (GroupStatementOfFitnessEnumeration.rdoStatFitnessYes.equals(form.GroupStatementOfFitness().getValue()))
			futurePlan.setStatementOfFitnessToWorkIssue(YesNo.YES);
		else if (GroupStatementOfFitnessEnumeration.rdoStatFitnessNo.equals(form.GroupStatementOfFitness().getValue()))
			futurePlan.setStatementOfFitnessToWorkIssue(YesNo.NO);
		else
			futurePlan.setStatementOfFitnessToWorkIssue(null);

		// Get From and To dates value
		futurePlan.setCertificateStartsDate(form.dteFrom().getValue());
		futurePlan.setCertificateExpiresDate(form.dteTo().getValue());

		// Get Fit to return to work value
		if (GroupFitToReturnToWorkEnumeration.rdoFitToReturnWorkYes.equals(form.GroupFitToReturnToWork().getValue()))
			futurePlan.setFitToReturnToWork(YesNo.YES);
		else if (GroupFitToReturnToWorkEnumeration.rdoFitToReturnWorkNo.equals(form.GroupFitToReturnToWork().getValue()))
			futurePlan.setFitToReturnToWork(YesNo.NO);
		else
			futurePlan.setFitToReturnToWork(null);

		// Get Return to work advice value
		futurePlan.setReturnToWorkAdvice(form.cmbReturnToWorkAdvice().getValue());

		// Get Advice applicable for values
		futurePlan.setAdviceApplicatiableFor(form.intAdviceApplicable().getValue());
		futurePlan.setAdviceApplicatiableForUnit(form.cmbAdviceapplicable().getValue());

		// Get Comments value
		futurePlan.setComments(form.txtComments().getValue());

		// Get Instructions for discharging nurse
		if (GroupFollowUpEnumeration.rdoNurseYes.equals(form.GroupFollowUp().getValue()))
			futurePlan.setWasNurseEnabledDischarge(Boolean.TRUE);
		else if (GroupFollowUpEnumeration.rdoNurseNo.equals(form.GroupFollowUp().getValue()))
			futurePlan.setWasNurseEnabledDischarge(Boolean.FALSE);
		else
			futurePlan.setWasNurseEnabledDischarge(null);

		if (!futurePlan.getNurseEnabledInstructionsIsNotNull())
		{
			futurePlan.setNurseEnabledInstructions(new NurseEnabledInstructionsVo());
			futurePlan.getNurseEnabledInstructions().setCareContext(form.getLocalContext().getCareContext());
		}

		futurePlan.getNurseEnabledInstructions().setNurseEnabledInstructions(form.txtNurseEnabled().getValue());

		// Get isCompleted value
		futurePlan.setIsComplete(form.chkComplete().getValue());

		return futurePlan;
	}

	private String[] validateUIRules()
	{
		// Create a new list of arrays
		ArrayList<String> listOfErrors = new ArrayList<String>();

		// Check to see if mandatory fields have values
		/*WDEV-11817
		 * if (GroupLivesAloneEnumeration.None.equals(form.GroupLivesAlone().getValue()))
			listOfErrors.add("Lives Alone is mandatory.");
		 */
		/*if (GroupCertificateOfSicknessEnumeration.None.equals(form.GroupCertificateOfSickness().getValue()))
			listOfErrors.add("Certificate of sickness Issued is mandatory.");*/

	//	if (GroupStatementOfFitnessEnumeration.None.equals(form.GroupStatementOfFitness().getValue()))
	//		listOfErrors.add("Statement of Fitness to Work Certificate Issued is mandatory.");

	//	if (GroupFitToReturnToWorkEnumeration.None.equals(form.GroupFitToReturnToWork().getValue()))
	//		listOfErrors.add("Fit to return to work is mandatory.");

	//	if (GroupFollowUpEnumeration.None.equals(form.GroupFollowUp().getValue()))
	//		listOfErrors.add("Instructions for Discharging Nurse is mandatory.");

		// Check to see if From and To dates are mandatory and completed
		if ( GroupStatementOfFitnessEnumeration.rdoStatFitnessYes.equals(form.GroupStatementOfFitness().getValue()))  //wdev-11818
		{
			if (form.dteFrom().getValue() == null)
				listOfErrors.add("From date is mandatory");

			if (form.dteTo().getValue() == null)
				listOfErrors.add("To date is mandatory");
			
			if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null
					&& form.dteTo().getValue().isLessThan(form.dteFrom().getValue()))
				listOfErrors.add("To date can not be set before From date");
		}

		// Check to see if Instructions for discharging nurse are mandatory and completed
		/*if (GroupFollowUpEnumeration.rdoNurseYes.equals(form.GroupFollowUp().getValue()))
		{
			if (form.txtNurseEnabled().getValue() == null || form.txtNurseEnabled().getValue().length() == 0)
				listOfErrors.add("Instructions for Discharging Nurse is mandatory.");
		}*/
		
		//WDEV-11991 - starts here
		for(int i=0; i<form.grdFuturePlan().getRows().size(); i++)
		{
			grdFuturePlanRow row = form.grdFuturePlan().getRows().get(i);
			
			if(!(row.getColHCP().getValue() instanceof HcpLiteVo) && (row.getColSpec() == null) && !(row.getColLoc().getValue() instanceof LocationLiteVo))
			{
				listOfErrors.add("HCP to Follow Up or Specialty to Follow Up or Location is mandatory.");
				break;
			}
		}
		//WDEV-11991 - ends here

		// Check to see if any errors were found
		int errorCount = listOfErrors.size();

		if (errorCount == 0)
			return null;

		// Transform the error list into an array
		String[] errors = new String[errorCount];

		for (int i = 0; i < errorCount; i++)
		{
			errors[i] = listOfErrors.get(i);
		}

		// Return the array of errors
		return errors;
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Follow up grid
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	private void populateFollowUpGridFromData(DischargeFuturePlanFollowUpVoCollection followUpDetails)
	{
		// Clear grid
		form.grdFuturePlan().getRows().clear();

		// Terminate if the collection is null
		if (followUpDetails == null)
			return;

		// Add each value to a grid row
		for (DischargeFuturePlanFollowUpVo value : followUpDetails)
		{
			if (value == null)
				continue;

			addFollowUpDetailRow(form.grdFuturePlan().getRows().newRow(), value);
		}
	}

	private void addFollowUpDetailRow(grdFuturePlanRow row, DischargeFuturePlanFollowUpVo value)
	{
		// Terminate if the value passed is null
		if (value == null)
			return;

		// Set column values
		//row.setColHospFollowUp(value.getHospitalFollowUp());
		row.setColIN(value.getFollowUpInValue());
		row.setColPeriod(value.getFollowUpInUnit());

		if (value.getFollowUpHCPIsNotNull())
		{
			row.getColHCP().newRow(value.getFollowUpHCP(), value.getFollowUpHCP().getName().toString());
			row.getColHCP().setValue(value.getFollowUpHCP());
		}

		row.setColSpec(value.getFollowUpSpecialty());

		if (value.getLocationIsNotNull())
		{
			row.getColLoc().newRow(value.getLocation(), value.getLocation().getName());
			row.getColLoc().setValue(value.getLocation());
		}

		// Set row value
		row.setValue(value);
	}

	private DischargeFuturePlanFollowUpVoCollection populateDataFromFollowUpGrid()
	{
		// Create a new collection
		DischargeFuturePlanFollowUpVoCollection collection = new DischargeFuturePlanFollowUpVoCollection();

		for (int i = 0; i < form.grdFuturePlan().getRows().size(); i++)
		{
			grdFuturePlanRow row = form.grdFuturePlan().getRows().get(i);

			// Get discharge future plan follow up
			collection.add(getRowValue(row));
		}

		// Return the collection
		return collection;
	}

	private DischargeFuturePlanFollowUpVo getRowValue(grdFuturePlanRow row)
	{
		// Get row value
		DischargeFuturePlanFollowUpVo value = row.getValue();

		if (value == null)
			value = new DischargeFuturePlanFollowUpVo();

		// Get values from columns
		//value.setHospitalFollowUp(row.getColHospFollowUp());
		value.setFollowUpInValue(row.getColIN());
		value.setFollowUpInUnit(row.getColPeriod());

		if (row.getColHCP().getValue() instanceof HcpLiteVo)
			value.setFollowUpHCP((HcpLiteVo) row.getColHCP().getValue());
		else
			value.setFollowUpHCP(null); //	WDEV-11991

		value.setFollowUpSpecialty(row.getColSpec());

		if (row.getColLoc().getValue() instanceof LocationLiteVo)
			value.setLocation((LocationLiteVo) row.getColLoc().getValue());
		else
			value.setLocation(null); //	WDEV-11991
		
		//wdev-11818-------------
		value.setHospitalFollowUp(YesNo.YES);
		//-----------------------

		// Return the value
		return value;
	}

	private void addNewFollowUpDetail()
	{
		// Add new row to FollowUp grid
		grdFuturePlanRow row = form.grdFuturePlan().getRows().newRow(true);
		
		
		updateRowColumnsState(row, false);		//wdev-11818
	}

	private void removeFollowUpDetail()
	{
		// Get selected FollowUp row
		if (form.grdFuturePlan().getSelectedRow() == null)
			throw new CodingRuntimeException("Can not remove null row");

		// Remove selected row
		form.grdFuturePlan().removeSelectedRow();
	}

	private void populateHcpQueryComboBox(grdFuturePlanRow row, HcpLiteVoCollection hcpCollection)
	{
		// Clear the QueryCombobox
		row.getColHCP().clear();
		row.getColHCP().setEditedText(null);

		// Terminate function if HCP collection is null
		if (hcpCollection == null || hcpCollection.size() == 0)
			return;

		for (HcpLiteVo value : hcpCollection)
		{
			row.getColHCP().newRow(value, value.getName().toString());
		}

		if (hcpCollection.size() == 1)
		{
			row.getColHCP().setValue(hcpCollection.get(0));
		}
		else
		{
			row.getColHCP().showOpened();
		}
	}

	private void populateLocationQueryComboBox(grdFuturePlanRow row, LocationLiteVoCollection locationCollection)
	{
		// Clear the QueryCombobox
		row.getColLoc().clear();
		row.getColLoc().setEditedText(null);

		// Terminate function if location collection is null
		if (locationCollection == null || locationCollection.size() == 0)
			return;

		for (LocationLiteVo value : locationCollection)
		{
			row.getColLoc().newRow(value, value.getName());
		}

		if (locationCollection.size() == 1)
		{
			row.getColLoc().setValue(locationCollection.get(0));
		}
		else
		{
			row.getColLoc().showOpened();
		}
	}

	//wdev-11818
	protected void onRadioButtonGroupFollowUpAppRequiredValueChanged() throws PresentationLogicException 
	{
		if (GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqYes.equals(form.GroupFollowUpAppRequired().getValue()))
		{
			if (form.grdFuturePlan().getRows().size() ==0)//WDEV-12036
				addNewFollowUpDetail();//WDEV-12036
			form.grdFuturePlan().setReadOnly(false);
		}
		else if (GroupFollowUpAppRequiredEnumeration.rdoFollowUpAppReqNo.equals(form.GroupFollowUpAppRequired().getValue()))
		{
			form.grdFuturePlan().getRows().clear();//WDEV-12036
			form.grdFuturePlan().setValue(null);//WDEV-12036
			
			form.grdFuturePlan().setEnabled(true);
			
		}
		updateGridFollowUpRowsColumnsState();
		updateContextMenusState();
	}

	@Override
	protected void onCmbReturnToWorkAdviceValueChanged() throws PresentationLogicException//WDEV-12036
	{
		updateControlsState();
		
	}

	
}
